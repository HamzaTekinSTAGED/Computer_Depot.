// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userID         Int            @id @default(autoincrement())
  username       String         @unique
  name           String
  surname        String
  email          String         @unique
  password       String
  emailVerified  DateTime?      
  image          String?        
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           UserRole       @default(USER)
  notf_number    Int           @default(0)

  // İlişkiler
  products        Product[]     @relation("UserProducts")
  salesHistory    TradeHistory[] @relation("Seller")
  purchasesHistory TradeHistory[] @relation("Buyer")
  accounts        Account[]
  sessions        Session[]
  cart            Cart[]
  comments        Comment[]
  replies         Reply[] // Added relation to replies made by the user
  commentLikes    Like[] @relation("UserLikes")
  favorites       Favorite[] // Added relation to user's favorites
}

enum UserRole {
  ADMIN
  USER
}

// NextAuth.js için gerekli modeller
model Account {
  id                 String   @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [userID], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [userID], onDelete: Cascade)
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Category {
  categoryID   Int       @id @default(autoincrement())
  name         String    @unique
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     Product[]
}

model Product {
  productID      Int       @id @default(autoincrement())
  title          String
  description    String    @db.LongText
  price          Float
  amount         Int       @default(1)
  maxBuyAmount   Int       @default(1) @db.UnsignedInt
  categoryID     Int
  category       Category  @relation(fields: [categoryID], references: [categoryID])
  imageURL       String?
  publishingDate DateTime  @default(now())

  // User ilişkisi (Product sahibini belirtir)
  userID   Int
  user     User      @relation("UserProducts", fields: [userID], references: [userID])

  // TradeHistory ilişkisi
  tradeHistory TradeHistory[]
  cart         Cart[]
  comments     Comment[]
  newCommentExist Boolean @default(false)
  favorites      Favorite[] // Added relation to product's favorites

  @@index([userID]) // Foreign key için index
  @@index([categoryID]) // Kategori aramaları için index
}

model TradeHistory {
  id           Int      @id @default(autoincrement())
  buyerID      Int
  sellerID     Int
  productID    Int
  price        Float
  amount       Int      @default(1)
  sellingDate  DateTime @default(now())

  // İlişkiler
  buyer   User    @relation("Buyer", fields: [buyerID], references: [userID])
  seller  User    @relation("Seller", fields: [sellerID], references: [userID])
  product Product @relation(fields: [productID], references: [productID])

  @@index([buyerID, sellerID])
  @@index([productID])
}

model Cart {
  id              Int      @id @default(autoincrement())
  user_id         Int
  product_id      Int
  added_amount    Int
  priceforoneItem Float

  // Relations
  user            User    @relation(fields: [user_id], references: [userID])
  product         Product @relation(fields: [product_id], references: [productID])

  @@index([user_id])
  @@index([product_id])
}

model Comment {
  userId     Int
  productId  Int
  star       Int                 // Validation (1-5) should be handled at application level
  comment    String?             @db.VarChar(200)
  getLiked   Int                 @default(0)
  photo      String?             @db.VarChar(255) // Assuming VARCHAR for path/URL
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  // Relations
  user       User                @relation(fields: [userId], references: [userID], onDelete: Cascade) // Cascade delete comments if user is deleted
  product    Product             @relation(fields: [productId], references: [productID], onDelete: Cascade) // Cascade delete comments if product is deleted
  replies    Reply[] // Relation to replies
  likes      Like[] // Relation to likes

  // Composite primary key to prevent multiple comments from the same user on the same product
  @@id([userId, productId])

  // Index for faster lookups
  @@index([userId])
  @@index([productId])
}

model Reply {
  replyID    Int      @id @default(autoincrement())
  commentUser Int // references Comment's composite key part 1
  commentProduct Int // references Comment's composite key part 2
  userID     Int      // ID of the user (seller) who made the reply
  text       String   @db.VarChar(500)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  comment    Comment  @relation(fields: [commentUser, commentProduct], references: [userId, productId], onDelete: Cascade)
  user       User     @relation(fields: [userID], references: [userID], onDelete: Cascade)

  @@index([commentUser, commentProduct])
  @@index([userID])
}

model Like {
  userID           Int
  commentUserID    Int 
  commentProductID Int
  isLiked          Boolean  @default(false)

  // Relations
  user             User     @relation("UserLikes", fields: [userID], references: [userID], onDelete: Cascade)
  comment          Comment  @relation(fields: [commentUserID, commentProductID], references: [userId, productId], onDelete: Cascade)

  @@id([userID, commentUserID, commentProductID]) // Composite primary key
  @@index([commentUserID, commentProductID])
  @@index([userID])
}

model Favorite {
  userId    Int
  productId Int

  user    User    @relation(fields: [userId], references: [userID], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [productID], onDelete: Cascade)

  @@id([userId, productId])
  @@index([userId])
  @@index([productId])
}
